// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';


// âœ… Unified client using env vars
type EnvRecord = Record<string, string | undefined>;

const getBrowserInjectedEnv = (): EnvRecord => {
  if (typeof globalThis === 'undefined') {
    return {};
  }

  const globalObject = globalThis as Record<string, unknown>;
  const possibleEnvKeys = ['__ENV__', '__env__'];

  for (const key of possibleEnvKeys) {
    const value = Reflect.get(globalObject, key) as unknown;

    if (typeof value === 'object' && value !== null) {
      return value as EnvRecord;
    }
  }

  const maybeWindow = Reflect.get(globalObject, 'window') as unknown;

  if (typeof maybeWindow === 'object' && maybeWindow !== null) {
    for (const key of possibleEnvKeys) {
      const value = Reflect.get(
        maybeWindow as Record<string, unknown>,
        key,
      ) as unknown;

      if (typeof value === 'object' && value !== null) {
        return value as EnvRecord;
      }
    }
  }

  return {};
};

const getCloudflareContextEnv = (): EnvRecord => {
  if (typeof globalThis === 'undefined') {
    return {};
  }

  const globalObject = globalThis as Record<string, unknown>;
  const maybeContext = Reflect.get(globalObject, 'context') as unknown;

  if (typeof maybeContext === 'object' && maybeContext !== null) {
    const maybeEnv = Reflect.get(
      maybeContext as Record<string, unknown>,
      'env',
    ) as unknown;

    if (typeof maybeEnv === 'object' && maybeEnv !== null) {
      return maybeEnv as EnvRecord;
    }
  }

  return {};
};

const browserEnv: EnvRecord = getBrowserInjectedEnv();
const cloudflareContextEnv: EnvRecord = getCloudflareContextEnv();

let importMetaEnv: EnvRecord = {};
try {
  importMetaEnv = ((import.meta as ImportMeta).env ?? {}) as EnvRecord;
} catch (error) {
  // `import.meta` isn't available in all runtimes (for example, during SSR in
  // some worker environments). We intentionally swallow the error here and
  // fall back to other environment sources.
}

const processEnv: EnvRecord =
  typeof process !== 'undefined'
    ? (process.env as EnvRecord)
    : {};

const envSources: EnvRecord[] = [
  browserEnv,
  cloudflareContextEnv,
  importMetaEnv,
  processEnv,
];

const resolveEnvVar = (key: string): string => {
  const candidates: string[] = [key];

  if (!key.startsWith('VITE_')) {
    candidates.push(`VITE_${key}`);
  }

  if (key.startsWith('NEXT_PUBLIC_')) {
    const suffix = key.replace(/^NEXT_PUBLIC_/, '');
    candidates.push(suffix);
    candidates.push(`VITE_${suffix}`);
  }

  for (const candidate of candidates) {
    for (const source of envSources) {
      const value = source[candidate];

      if (typeof value === 'string' && value.length > 0) {
        return value;
      }
    }
  }

  throw new Error(`Environment variable "${key}" is not defined`);
};

const SUPABASE_URL = resolveEnvVar('SUPABASE_URL');
const SUPABASE_ANON_KEY = resolveEnvVar('SUPABASE_ANON_KEY');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_ANON_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
    },
  }
);
